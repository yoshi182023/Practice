#include <iostream>
#include <string>
using namespace std;

void maui(string s) {
    for (int i = 0; i < s.length(); i++) {
        s[i] += 2;
    }
}

void sina(string& s) {
    for (int i = 0; i < s.length(); i++) {
        s[i] += 2;
    }
}

void moana(string& s) {
    for (char ch : s) {
        ch += 2;
    }
}

void heihei(string& s) {
    for (char& ch : s) {
        ch += 2;
    }
}

string teFiti(string& s) {
    string result;
    for (char ch : s) {
        result += (ch + 2);
    }
    return result;
}

int main() {
    string s = "umm";

    maui(s);
    cout << "After maui: " << s << endl;  // "umm" (unchanged)

    sina(s);
    cout << "After sina: " << s << endl;  // "woo" (modified)

    moana(s);
    cout << "After moana: " << s << endl; // "woo" (unchanged)

    heihei(s);
    cout << "After heihei: " << s << endl; // "yqq" (modified)

    string newStr = teFiti(s);
    cout << "After teFiti: " << s << endl;       // "yqq" (unchanged)
    cout << "teFiti returned: " << newStr << endl; // "{ss" (new string)

    return 0;
}

/*
 * CS106B Section Handout Test Harness: Section 1
 * ----------------------------------------------
 * These problems have been galvanized from years of
 * section handouts that have been worked on by numerous
 * instructors and TA's. Originally codified by Trip Master
 * and Nick Bowman for CS106B Spring 2020.
 *
 * A huge thank you to Keith Schwarz and Julie Zelenski
 * for creating an amazing testing harness!
 */

#include <iostream>
#include "string.h"
#include "vector.h"
#include "SimpleTest.h"
#include "set.h"

using namespace std;

/*
 * PigLatin (Code Write)
 * ---------------------
 * Write TWO functions that convert a string INPUT into its
 * pig-Latin form. To convert a word into pig-Latin, follow these
 * steps:
 * 1. Split INPUT into 2 parts, the string of letters BEFORE the
 *    first vowel, and the string of letters AFTER (and including) the
 *    first vowel.
 * 2. Append the before-string to the after-string.
 * 3. Append "ay" to this resulting string.
 *
 * You may assume your input is a single, valid word with no trickery.
 *
 * Both functions below should have the same functionality, but pigLatinReturn()
 * expects a new string in return that is the pig-Latin form of INPUT, and
 * pigLatinReference() expects the parameter INPUT to be modified by the function call.
 */
const string VOWELS = "aeiouy";

bool isVowel2(char ch) {
    // A little kludgy, but the handout guarantees that
    // ch will ALWAYS be lower case :)
    // NOTE: For an assignment, you probably want a more robust isVowel.
    return VOWELS.find(ch) != string::npos;
}

bool isVowel(char ch){
    const Set<char> vowels= {'a', 'e', 'i', 'o','u','y'};//the set of vowels is never going to change * using const
    return vowels.contains(ch);
}
int firstVowelIndex(string input){
    for(int i=0;i < input.length();i++){
        if(isVowel(input[i])){
            return i;
        }
    }
    return -1;
}

string pigLatinReturn(string input){
    int vowelIndex = firstVowelIndex(input);

    string part1;
    string part2;
    // If no vowels found or first letter is vowel
    if(vowelIndex == -1) {
        return input + "ay";
    }else {
        string part1 = input.substr(0, vowelIndex);
        string part2 = input.substr(vowelIndex);
        return part2 + part1 + "ay";
    }
}
//     int strOneIndex = 0;
//     for (int i = 0; i < input.length(); i++) {
//         if (isVowel(input[i])) {
//             strOneIndex = i;
//             break;
//         }
//     }
//     string strOne = input.substr(0, strOneIndex);
//     string strTwo = input.substr(strOneIndex);
//     return strTwo + strOne + "ay";
// }

void pigLatinReference(string &input) {
    int strOneIndex = 0;
    for (int i = 0; i < input.length(); i++) {
        if (isVowel(input[i])) {
            strOneIndex = i;
            break;
        }
    }
    string strOne = input.substr(0, strOneIndex);
    string strTwo = input.substr(strOneIndex);
    input = strTwo + strOne + "ay";
}

/* * * * * Provided Tests Below This Point * * * * */

PROVIDED_TEST("test case from handout"){
    string name = "julie";
    string str1 = pigLatinReturn(name);
    EXPECT_EQUAL(str1, "uliejay");

    pigLatinReference(name);
    EXPECT_EQUAL(name, "uliejay");
}

PROVIDED_TEST("Test a few more names from the handout"){
    Vector<string> names = { // Declarations like this will make you the talk of the town!
        "nick",
        "kylie",
        "trip"
    };
    Vector<string> pigLatinNames = {
        "icknay",
        "yliekay",
        "iptray"
    };
    for (int i = 0; i < names.size(); i++){
        EXPECT_EQUAL(pigLatinNames[i], pigLatinReturn(names[i]));
        /* Not good form to modify the contents of a container you loop thru, so make a copy! */
        string nameCpy = names[i];
        pigLatinReference(nameCpy);
        EXPECT_EQUAL(pigLatinNames[i], nameCpy);
    }
}

